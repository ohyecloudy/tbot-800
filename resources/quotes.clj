["알지도 못하며 그 사실도 모르는 자, 바보로다. 그를 멀리하라! 알지 못하나 그 사실을 아는 자, 못 배운 자로다. 그를 가르치라! 알고 있으나 그 사실을 모르는 자, 잠든 자로다. 그를 깨우라! 알고 있으며 그 사실을 아는 자, 깨우친 자로다. 그를 따르라! - 아랍 속담 - 프로그래머의 길, 멘토에게 묻다"
 "견습과정은, 기예를 통달하겠다는 필생의 열정을 서서히 불어넣는다는 점에서 중요하다. 이는 끊임없이 배우고자 하는 열정을 점점 쌓이게 하며, 그런 과정 속에서 견습생은 탁월한 개발자가 될 수 있다. from 피트 맥브린, software craftsmanship via p37 - 프로그래머의 길, 멘토에게 묻다"
 "학습 상황이란 본질적으로, 자기가 무엇을 하고 있는지 정말로 알고 있는 누군가를 도우면서 배워가는 과정이다. from 크리스토퍼 알렉산더 외, A Pattern Language via p52 - 프로그래머의 길, 멘토에게 묻다"
 "대개 발걸음 하나하나마다 새로 시작한다는 느낌이 들어야 한다. 이것이 초심이며, '되고 있음'의 상태다. from 순류 스즈키, 'Zen Mind, Beginner's Mind' via 74 - 프로그래머의 길, 멘토에게 묻다"
 "무참한 실패를 맛본 적이 한 번도 없다면, 당신은 뭔가 가치 있는 일을 시도했던 적이 한 번도 없었다고 봐야 한다. - 크리스토퍼 호킨스 - 프로그래머의 길, 멘토에게 묻다"
 "'합기도를 마스터하려면 얼마나 걸리나요?' 수련 지망생이 묻는다. 여기에 대한 훌륭한 대답은 이것뿐이다. '자네 얼마나 오래 살 것 같나?' from 조지 레너드, Mastery via 112 - 프로그래머의 길, 멘토에게 묻다"
 "나는 프로그래밍을 일종의 공예로 본다. 공예는 예술의 일종이긴 하나 순수 예술은 아니다. 장식적인 면이 가미될 수는 있겠지만, 공예는 어쨌거나 쓸모 있는 물건을 만드는 작업이다. 하지만 순수 예술은 오직 아름다움을 목적으로 하는 무언가를 만드는 일이다. from '예술과 프로그래밍'에 대한 리처드 스톨만의 견해 via 117 - 프로그래머의 길, 멘토에게 묻다"
 "우리는 수리를 하면서 그것이 동작하는 원리를 이해하는 경우가 종종 있다. via 120 - 프로그래머의 길, 멘토에게 묻다"
 "황금 족쇄(Golden Lock) - '뭔가 새로운 걸 배우고 싶지만, 내가 이미 알고 있는 것만으로도 벌이가 너무 좋다.' - 제랄드 와인버그, 'More Secrets of Consulting' via 123 - 프로그래머의 길, 멘토에게 묻다"
 "죽음의 행진은 여러 소프트웨어 개발 조직에서 흔히 볼 수 있는 영웅 심리에 기인한다. 긴 여정을 걷는 사람들은 몇 년 정도 전력 질주한 후에 그냥 소진되어 버리는 영웅이 아니다. 그들은 수십 년은 지속할 수 있는 걸음걸이로 움직이는 사람들이다. from 129 - 프로그래머의 길, 멘토에게 묻다"
 "자네를 선임 엔지니어에서 수석 엔지니어로 승진시키겠네. 급여는 그대로지만 사람들이 자네를 조금 덜 무시할거야. from 딜버트의 뾰족 머리 상사 via 137 - 프로그래머의 길, 멘토에게 묻다"
 "숙련됨은 연습을 중단하는 그 시점부터 퇴보하기 시작한다. from 피트 맥브린 via 140 - 프로그래머의 길, 멘토에게 묻다"
 "당신이 속하는 어느 밴드에서든지 제일 뒤떨어진 사람이 되도록 하세요. from 팻 메스니 via 152 - 프로그래머의 길, 멘토에게 묻다"
 "만일 그래도 괜찮다면, 우리는 일을 진지하게 시작하기도 전에 늘 뭔가 주의를 돌릴 만한 일이 일어나지 않을까 하고 기다려 볼 것이다. 큰 성취를 이루는 사람들이란 지식을 너무나 갈망하여 좋지 않은 여건에서도 그것을 탐구하는 이들이다. 여건이 좋을 때란 결코 오지 않는다. from C.S. 루이스, 'Learning in War-Time', 'The Weight of Glory and Other Address' via 181 - 프로그래머의 길, 멘토에게 묻다"
 "우리가 마스터라고 알고 있는 사람들은 어떤 특정한 기술에 더 능숙해질 목적으로 거기 전념하지는 않는다. 사실 그 사람들은 연습하는 것 자체를 좋아하며, 이 때문에 그들이 점점 더 능숙해지는 것이다. 그리고 더 능숙해질수록 기본적인 동작을 더 즐기게 되는 선순환이 완성된다. from 조지 레너드, Mastery via 189 - 프로그래머의 길, 멘토에게 묻다"
 "소프트웨어를 만들면서 우리는 업무 중에 연습을 하는데, 그것이 업무 중에 실수를 하게 되는 원인이다. 우리는 작업적인 일과 연습을 구분할 방법을 모색해야 한다. 우리에게는 연습 시간이 필요하다. - 데이브 토머스, 코드 카타(Code Kata)에 대한 글 via 190 - 프로그래머의 길, 멘토에게 묻다"
 "연습이란 이론적으로 좋은 것이지만, 주기적인 피드백을 받지 못한다면 오히려 나쁜 습관을 들이고 있는 것일 수도 있다. from 192 - 프로그래머의 길, 멘토에게 묻다"
 "어떤 일이든 간에 사랑하지 않고서는 정말로 잘 할 수가 없다. 그리고 당신이 해킹을 사랑한다면 필연적으로 자신만의 프로젝트를 하게 될 것이다. from 폴 그레이엄, 'Hackers & Painters' via 194 - 프로그래머의 길, 멘토에게 묻다"
 "프로그래밍 능력을 테스트하는 가장 좋은 방법 중 하나는, 프로그래머에게 30페이지 정도의 코드를 건네주고서 그 사람이 얼마나 빨리 그 코드를 통독하고 이해하는지 보는 것이다. from 빌 게이츠, 'Programmers at Work' via 205 - 프로그래머의 길, 멘토에게 묻다"
 "피터의 법칙 : 조직에서 일하는 모든 사람은 자신의 무능력 수준에 도달할 때까지 승진한다. from 207 - 프로그래머의 길, 멘토에게 묻다"
 "반경험(Anti-Experience)이란, 해마다 쌓이는 '경험'이라는 것이 나쁜 습관을 더욱 강화하는 것에 지나지 않게 되는 현상을 일컫는다. - 프로그래머의 길, 멘토에게 묻다"
 "쓰는 행위 자체가 가진 힘 역시 과소평가해서는 안 된다. (중략) 당신은 더 큰 목적의식을 잃어버릴수도 있을 텐데, 쓴다는 행위는 한 발짝 물러서서 문제에 대해 깊이 생각할 수 있도록 해 준다. 앞뒤없는 비난의 글을 쓰는 사람이라도 어느 정도는 생각을 해야만 한다. from 아툴 가완디, 'Better' via 212 - 프로그래머의 길, 멘토에게 묻다"
 "천재성은 종종 잘못 이해된다. 그것은 탁월한 지적 능력의 문제가 아니라 성격의 문제다. 천재성은 무엇보다도 기꺼이 실패를 인지하고, 미봉책으로 가리려 하지 않으며, 변화하고자 하는 의지를 필요로 한다. 그것은 실패에 대한 의도적이고 심지어는 강박적인 성찰과, 새로운 해법에 대한 지속적인 탐색에서 비롯된다. from 아툴 가완디, 'Better' via 225 - 프로그래머의 길, 멘토에게 묻다"
 "좋은 프로그래밍 책을 두 달에 한 권, 즉 일주일에 대략 35페이지 정도만 읽어도, 당신은 이내 이 분야에 대해서 확실한 감을 갖게 될 것이며 주변의 거의 모든 이들과 구별되는 수준으로 올라설 것이다. from 스티브 맥코넬, 'Code Complete' via 237 - 프로그래머의 길, 멘토에게 묻다"
 "조슈아 케리에브스키가 언젠가 제리 와인버그에게, 어떻게 하면 쏟아져 나오는 그 모든 책들을 따라잡을 수 있느냐고 물었다. 제리가 대답했다. '그건 쉽습니다. 나는 제일 훌륭한 것들만 읽지요.' from 'Refactoring to Patterns' via 240 - 프로그래머의 길, 멘토에게 묻다"
 "어떤 개념을 정말로 이해하려면 그 개념이 최초로 언급된 당시의 전후 맥락을 재구성해 볼 필요가 있다. 이렇게 해야 개념의 정수가 그 모든 중간자를 거치고도 살아남았음을 확인할 수 있다. from 246 - 프로그래머의 길, 멘토에게 묻다"
 "바퀴 자국 안에 빠지게 되면 아무리 바퀴를 돌려도 계속 제자리고, 유일한 진척이라고는 더 깊게 파이는 자국뿐이다. from 트와일라 타프, 'The Creative Habit' via 251 - 프로그래머의 길, 멘토에게 묻다"
 "명장들의 침묵 속에 담긴 실마리들을 끄집어내기 위해 그들 스스로 설명하도록 계속 졸라야 하며, 망묵적인 지식을 명시적인 형태로 드러내도록 독촉해야 한다. from 259 - 프로그래머의 길, 멘토에게 묻다"
 "대부분의 프로그래머들은 자신이 평균 이상이라고 생각한다. 하지만 현실은, ... 비대칭적인 분포로 인해 대부분 평균 이하다... 역량 분포 곡선의 극단에 위치한 사람들이 전체 분포를 기울게 만드는 것이다. - 프로그래머의 길, 멘토에게 묻다"
 "증명의 부재가 곧 부재의 증거는 아니다. from 265 - 프로그래머의 길, 멘토에게 묻다"]
